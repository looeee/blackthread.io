THREE.WebGLDeferredRenderer=function(e){e=e||{};var r,t,i,n,o,a,l,s,d,m,u,h,c,f,E,v,p,g,T,R,S,H=this,C=!1,x=!1,D=!1,w=!1,k=new THREE.ShaderMaterial({visible:!1}),P=new THREE.Vector3,_={},y={},b={},V={},j={},U={},F={},N={},L={},M=60,z={},I={},A={};function W(e){var r,t,i,o,a=_[e.uuid],l=y[e.uuid];void 0===a&&((s=new THREE.Scene).userData.lights={},(a=Se()).scene=s,_[e.uuid]=a);if(void 0===l){var s;(s=new THREE.Scene).userData.lights={};var d=(r=THREE.ShaderDeferred.emissiveLight,t=new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,blending:THREE.NoBlending,depthWrite:!1}),i=new THREE.PlaneBufferGeometry(2,2),(o=new THREE.Mesh(i,t)).onBeforeRender=function(e,r,t,i,o,a){o.uniforms.samplerColor.value=n.renderTarget2.texture},o);s.userData.emissiveLight=d,s.add(d),(l=Se()).scene=s,y[e.uuid]=l}a.used=!0,l.used=!0;var m=a.scene,u=l.scene;u.userData.emissiveLight.visible=!D,R=m,S=u}function B(e,r,t,i){var n=r[e.uuid];return void 0===n&&((n=Se()).material=t(e),r[e.uuid]=n),n.used=!0,i(n.material,e),z[n.material.uuid]=e,n.material}function O(e,r,t){if(void 0!==e.material){if(Array.isArray(e.material))for(var i=0,n=e.material.length;i<n;i++)e.material[i]=r(e.material[i]);else e.material=r(e.material);e.onBeforeRender=t}}function G(e){if(void 0!==e.material)if(Array.isArray(e.material))for(var r=0,t=e.material.length;r<t;r++)e.material[r]=z[e.material[r].uuid];else e.material=z[e.material.uuid]}function K(e){O(e,q,Y)}function q(e){return B(e,D?V:b,Q,X)}function Q(e){var r=D?THREE.ShaderDeferred.normalDepthShininess:THREE.ShaderDeferred.normalDepth;return new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending})}function X(e,r){void 0!==r.skinning&&(e.skinning=r.skinning),void 0!==r.morphTargets&&(e.morphTargets=r.morphTargets),!0===r.visible?e.visible=!r.transparent:e.visible=!1}function Y(e,r,t,i,n,o){if(D){var a=z[n.uuid];void 0!==a&&void 0!==a.shininess&&(n.uniforms.shininess.value=a.shininess)}}function J(e){O(e,Z,re)}function Z(e){return B(e,j,$,ee)}function $(e){var r=THREE.ShaderDeferred.color,t=new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending});return void 0!==e.map&&(t.map=e.map),t}function ee(e,r){void 0!==r.map&&(e.map=r.map),void 0!==r.skinning&&(e.skinning=r.skinning),void 0!==r.morphTargets&&(e.morphTargets=r.morphTargets),!0===r.visible?e.visible=!r.transparent:e.visible=!1}function re(e,r,t,i,n,o){var a,l,s=z[n.uuid],d=n.uniforms;!0===s.isMeshBasicMaterial?l=s.color:(a=s.color,l=s.emissive);var m=s.specular,u=s.shininess,h=s.map;void 0!==a&&d.diffuse.value.copy(a),void 0!==l&&d.emissive.value.copy(l),void 0!==m&&d.specular.value.copy(m),void 0!==u&&void 0!==d.shininess&&(d.shininess.value=u),void 0!==h&&(d.map.value=h)}function te(e){O(e,ie,ae)}function ie(e){return!0===e.transparent?(z[e.uuid]=e,e):B(e,U,ne,oe)}function ne(e){var r=THREE.ShaderDeferred.reconstruction,t=new THREE.ShaderMaterial({uniforms:Object.assign({},r.uniforms),fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,blending:THREE.NoBlending});return void 0!==e.map&&(t.map=e.map),t}function oe(e,r){ee(e,r)}function ae(e,r,t,i,n,o){if(!0!==n.transparent)re(0,0,0,0,n),n.uniforms.samplerLight.value=u.renderTarget2.texture;else{var a=I[this.uuid];a&&a.call(this,e,r,t,i,n,o)}}function le(e){if(void 0!==e.material)if(Array.isArray(e.material))for(var r=0,t=e.material.length;r<t;r++)void 0===A[e.material[r].uuid]&&(A[e.material[r].uuid]=e.material[r].visible,e.material[r].visible=e.material[r].transparent&&e.material[r].visible);else void 0===A[e.material.uuid]&&(A[e.material.uuid]=e.material.visible,e.material.visible=e.material.transparent&&e.material.visible)}function se(e){if(void 0!==e.material)if(Array.isArray(e.material))for(var r=0,t=e.material.length;r<t;r++)e.material[r].visible=A[e.material[r].uuid];else e.material.visible=A[e.material.uuid]}function de(e){return e.isPointLight?((i=ue(e,new THREE.SphereGeometry(1,16,8))).onBeforeRender=fe,i):e.isSpotLight?((t=ue(e,new THREE.PlaneBufferGeometry(2,2))).onBeforeRender=Ee,t):e.isDirectionalLight?((r=ue(e,new THREE.PlaneBufferGeometry(2,2))).onBeforeRender=ve,r):null;var r,t,i}function me(e){return e.isPointLight?((i=he(D?THREE.ShaderDeferred.pointLightPre:THREE.ShaderDeferred.pointLight)).side=THREE.BackSide,i.depthFunc=THREE.GreaterEqualDepth,i):e.isSpotLight?((t=he(D?THREE.ShaderDeferred.spotLightPre:THREE.ShaderDeferred.spotLight)).depthTest=!1,t):e.isDirectionalLight?((r=he(D?THREE.ShaderDeferred.directionalLightPre:THREE.ShaderDeferred.directionalLight)).depthTest=!1,r):null;var r,t,i}function ue(e,r){var t=new THREE.Mesh(r,k);return t.userData.originalLight=e,t}function he(e){var r=new THREE.ShaderMaterial({uniforms:Object.assign({},e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,transparent:!0,blending:THREE.AdditiveBlending,depthWrite:!1});return D&&(r.premultipliedAlpha=!0),r}function ce(e){D?e.samplerNormalDepthShininess.value=m.renderTarget2.texture:(e.samplerNormalDepth.value=m.renderTarget2.texture,e.samplerColor.value=n.renderTarget2.texture)}function fe(e,r,t,i,n,o){var a=this.userData.originalLight,l=a.distance,s=n.uniforms;s.lightColor.value.copy(a.color),l>0?(s.lightRadius.value=l,s.lightIntensity.value=a.intensity,s.lightPositionVS.value.setFromMatrixPosition(a.matrixWorld).applyMatrix4(T.matrixWorldInverse)):s.lightRadius.value=1/0,ce(s)}function Ee(e,r,t,i,n,o){var a=this.userData.originalLight,l=this.material.uniforms;l.lightAngle.value=a.angle,l.lightColor.value.copy(a.color),l.lightIntensity.value=a.intensity,l.lightPositionVS.value.setFromMatrixPosition(a.matrixWorld).applyMatrix4(T.matrixWorldInverse);var s=l.lightDirectionVS.value,d=P;s.setFromMatrixPosition(a.matrixWorld),d.setFromMatrixPosition(a.target.matrixWorld),s.sub(d).normalize().transformDirection(T.matrixWorldInverse),ce(l)}function ve(e,r,t,i,n,o){var a=this.userData.originalLight,l=this.material.uniforms;l.lightColor.value.copy(a.color),l.lightIntensity.value=a.intensity;var s=l.lightDirectionVS.value,d=P;s.setFromMatrixPosition(a.matrixWorld),d.setFromMatrixPosition(a.target.matrixWorld),s.sub(d).normalize().transformDirection(T.matrixWorldInverse),ce(l)}function pe(e){if(void 0!==e.material&&(I[e.uuid]=e.onBeforeRender,!x&&!D&&e.visible))if(Array.isArray(e.material)){for(var r=0,t=e.material.length;r<t;r++)if(!0===e.material[r].visible&&!0===e.material[r].transparent){x=!0;break}}else!0===e.material.visible&&!0===e.material.transparent&&(x=!0)}function ge(e){void 0!==e.material&&(e.onBeforeRender=I[e.uuid])}function Te(e){if(!0===e.isLight){var r=F[e.uuid];void 0===r&&((r=Se()).light=de(e),F[e.uuid]=r),r.used=!0;var t=r.light;if(null!==t){var i=!0===e.isPointLight?R:S,n=i.userData.lights;void 0===n[t.uuid]&&(i.add(t),n[t.uuid]={light:t,found:!0}),n[t.uuid].found=!0}}}function Re(e){for(var r,t,i,n,o,a,l,s=e.userData.lights,d=Object.keys(s),m=0,u=d.length;m<u;m++){var h=d[m];if(!1===s[h].found)e.remove(s[h].light),delete s[h];else{var c=s[h].light;c.material=(o=c,a=void 0,l=void 0,void 0===(l=(a=D?L:N)[o.uuid])&&((l=Se()).material=me(o.userData.originalLight),a[o.uuid]=l),l.used=!0,l.material),t=void 0,i=void 0,n=void 0,(r=c).userData.originalLight.isPointLight&&(i=(t=r).userData.originalLight,(n=i.distance)>0&&(t.scale.set(1,1,1).multiplyScalar(n),t.position.setFromMatrixPosition(i.matrixWorld))),s[h].found=!1}}}function Se(){return{used:!0,keepAlive:w,count:0}}function He(e){for(var r=Object.keys(e),t=0,i=r.length;t<i;t++){var n=r[t];!1===e[n].used?(e[n].count++,!1===e[n].keepAlive&&e[n].count>M&&delete e[n]):(e[n].used=!1,e[n].count=0)}}function Ce(e){for(var r=Object.keys(e),t=0,i=r.length;t<i;t++){e[r[t]]=void 0}}function xe(e,r){!D&&x&&(e.traverse(le),e.traverse(ge),a.scene=e,a.camera=r),D?(a.renderToScreen=!1,a.enabled=!1,l.renderToScreen=!1,l.enabled=!1,C?(v.renderToScreen=!1,p.renderToScreen=!0,p.enabled=!0):(v.renderToScreen=!0,p.renderToScreen=!1,p.enabled=!1)):x?C?(v.renderToScreen=!1,a.renderToScreen=!1,a.enabled=!0,l.renderToScreen=!1,l.enabled=!1,p.renderToScreen=!0,p.enabled=!0):(v.renderToScreen=!1,a.renderToScreen=!1,a.enabled=!0,l.renderToScreen=!0,l.enabled=!0,p.renderToScreen=!1,p.enabled=!1):C?(v.renderToScreen=!1,a.renderToScreen=!1,a.enabled=!1,l.renderToScreen=!1,l.enabled=!1,p.renderToScreen=!0,p.enabled=!0):(v.renderToScreen=!0,a.renderToScreen=!1,a.enabled=!1,l.renderToScreen=!1,l.enabled=!1,p.renderToScreen=!1,p.enabled=!1),H.renderer.autoClearDepth=!1,H.renderer.autoClearStencil=!1,h.render(),!D&&x&&e.traverse(se)}this.renderer=void 0,this.domElement=void 0,this.forwardRendering=!1,this.setSize=function(e,r){t=e,i=r,this.renderer.setSize(t,i),m.setSize(t,i),n.setSize(t,i),u.setSize(t,i),s.setSize(t,i),h.setSize(t,i),g.image.width=t,g.image.height=i,g.needsUpdate=!0,p.uniforms.resolution.value.set(1/t,1/i)},this.setAntialias=function(e){C=e},this.enableLightPrePass=function(e){D=e,v.uniforms.samplerResult.value=D?s.renderTarget2.texture:u.renderTarget2.texture},this.render=function(e,a){if(this.forwardRendering)this.renderer.render(e,a);else{var l,h,v,p,g,C,w,k,P,M,B=e.autoUpdate,O=this.renderer.autoClearColor,q=this.renderer.autoClearDepth,Q=this.renderer.autoClearStencil;T=a,W(e),e.autoUpdate=!1,e.updateMatrixWorld(),x=!1,e.traverse(pe),l=a,(h=THREE.ShaderDeferredCommon.commonUniforms).viewWidth.value=t,h.viewHeight.value=i,h.matProjInverse.value.getInverse(l.projectionMatrix),p=a,(v=e).traverse(K),c.scene=v,c.camera=p,H.renderer.autoClearDepth=!0,H.renderer.autoClearStencil=!0,r.enable(r.STENCIL_TEST),r.stencilFunc(r.ALWAYS,1,4294967295),r.stencilOp(r.REPLACE,r.REPLACE,r.REPLACE),m.render(),v.traverse(G),D?(M=a,e.traverse(Te),Re(R),Re(S),f.scene=R,f.camera=M,E.scene=S,H.renderer.autoClearDepth=!1,H.renderer.autoClearStencil=!1,r.stencilFunc(r.EQUAL,1,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),u.render(),P=a,(k=e).traverse(te),d.scene=k,d.camera=P,H.renderer.autoClearDepth=!1,H.renderer.autoClearStencil=!1,s.render(),r.disable(r.STENCIL_TEST),k.traverse(G)):(w=a,(C=e).traverse(J),o.scene=C,o.camera=w,H.renderer.autoClearDepth=!1,H.renderer.autoClearStencil=!1,r.stencilFunc(r.EQUAL,1,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),n.render(),C.traverse(G),g=a,e.traverse(Te),Re(R),Re(S),f.scene=R,f.camera=g,E.scene=S,H.renderer.autoClearDepth=!1,H.renderer.autoClearStencil=!1,u.render(),r.disable(r.STENCIL_TEST)),xe(e,a),e.traverse(ge),He(_),He(y),He(b),He(V),He(j),He(U),He(N),He(L),He(F),Ce(z),Ce(I),Ce(A),e.autoUpdate=B,this.renderer.autoClearColor=O,this.renderer.autoClearDepth=q,this.renderer.autoClearStencil=Q}},function(e){H.renderer=void 0!==e.renderer?e.renderer:new THREE.WebGLRenderer,H.domElement=H.renderer.domElement,r=H.renderer.context,t=void 0!==e.width?e.width:H.renderer.getSize().width,i=void 0!==e.height?e.height:H.renderer.getSize().height;var T=void 0!==e.antialias&&e.antialias;void 0!==e.cacheKeepAlive&&(w=e.cacheKeepAlive),g=new THREE.DepthTexture(t,i,THREE.UnsignedInt248Type,void 0,void 0,void 0,void 0,void 0,void 0,THREE.DepthStencilFormat),function(){(c=new THREE.RenderPass).clear=!0;var e=new THREE.WebGLRenderTarget(t,i,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,stencilBuffer:!0,depthTexture:g});e.texture.generateMipamps=!1,(m=new THREE.EffectComposer(H.renderer,e)).addPass(c)}(),function(){(o=new THREE.RenderPass).clear=!0;var e=new THREE.WebGLRenderTarget(t,i,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:g});e.texture.generateMipamps=!1,(n=new THREE.EffectComposer(H.renderer,e)).addPass(o)}(),function(){(E=new THREE.RenderPass).clear=!0,E.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),(f=new THREE.RenderPass).clear=!1;var e=new THREE.WebGLRenderTarget(t,i,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:g});e.texture.generateMipamps=!1,(u=new THREE.EffectComposer(H.renderer,e)).addPass(E),u.addPass(f)}(),function(){(d=new THREE.RenderPass).clear=!0;var e=new THREE.WebGLRenderTarget(t,i,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthTexture:g});e.texture.generateMipamps=!1,(s=new THREE.EffectComposer(H.renderer,e)).addPass(d)}(),function(){(v=new THREE.ShaderPass(THREE.ShaderDeferred.final)).clear=!0,v.uniforms.samplerResult.value=u.renderTarget2.texture,v.material.blending=THREE.NoBlending,v.material.depthWrite=!1,v.material.depthTest=!1,(a=new THREE.RenderPass).clear=!1,l=new THREE.ShaderPass(THREE.CopyShader),p=new THREE.ShaderPass(THREE.FXAAShader);var e=new THREE.WebGLRenderTarget(t,i,{minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,type:THREE.UnsignedByteType,depthTexture:g});e.texture.generateMipamps=!1,(h=new THREE.EffectComposer(H.renderer,e)).addPass(v),h.addPass(a),h.addPass(l),h.addPass(p)}(),H.setSize(t,i),H.setAntialias(T),H.enableLightPrePass(!1)}(e)},THREE.DeferredShaderChunk={packVector3:["float vec3_to_float( vec3 data ) {","\tconst float unit = 255.0/256.0;","\thighp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;","\treturn compressed;","}"].join("\n"),unpackFloat:["vec3 float_to_vec3( float data ) {","\tconst float unit = 255.0;","\tvec3 uncompressed;","\tuncompressed.x = fract( data );","\tfloat zInt = floor( data / unit );","\tuncompressed.z = fract( zInt / unit );","\tuncompressed.y = fract( floor( data - ( zInt * unit ) ) / unit );","\treturn uncompressed;","}"].join("\n"),packNormal:["vec2 normal_to_vec2( vec3 normal ) {","\treturn normal.xy / sqrt( normal.z * 8.0 + 8.0 ) + 0.5;","}"].join("\n"),unpackVector2:["vec3 vec2_to_normal( vec2 data ) {","\tvec2 fenc = data * 4.0 - 2.0;","\tfloat f = dot( fenc, fenc );","\tfloat g = sqrt( 1.0 - f / 4.0 );","\tvec3 normal;","\tnormal.xy = fenc * g;","\tnormal.z = 1.0 - f / 2.0;","\treturn normal;","}"].join("\n"),computeTextureCoord:["vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );"].join("\n"),packNormalDepth:["vec4 packedNormalDepth;","packedNormalDepth.xyz = normal * 0.5 + 0.5;","packedNormalDepth.w = position.z / position.w;"].join("\n"),unpackNormalDepth:["vec4 normalDepthMap = texture2D( samplerNormalDepth, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = normalDepthMap.xyz * 2.0 - 1.0;"].join("\n"),packNormalDepthShininess:["vec4 packedNormalDepthShininess;","packedNormalDepthShininess.xy = normal_to_vec2( normal );","packedNormalDepthShininess.z = shininess;","packedNormalDepthShininess.w = position.z / position.w;"].join("\n"),unpackNormalDepthShininess:["vec4 normalDepthMap = texture2D( samplerNormalDepthShininess, texCoord );","float depth = normalDepthMap.w;","if ( depth == 0.0 ) discard;","vec3 normal = vec2_to_normal( normalDepthMap.xy );","float shininess = normalDepthMap.z;"].join("\n"),packColor:["vec4 packedColor;","packedColor.x = vec3_to_float( diffuseColor.rgb );","packedColor.y = vec3_to_float( emissiveColor );","packedColor.z = vec3_to_float( specularColor );","packedColor.w = shininess;"].join("\n"),unpackColor:["vec4 colorMap = texture2D( samplerColor, texCoord );","vec3 diffuseColor = float_to_vec3( colorMap.x );","vec3 emissiveColor = float_to_vec3( colorMap.y );","vec3 specularColor = float_to_vec3( colorMap.z );","float shininess = colorMap.w;"].join("\n"),packLight:["vec4 packedLight;","packedLight.xyz = lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * attenuation;","packedLight.w = lightIntensity * specular * max( dot( lightVector, normal ), 0.0 ) * attenuation;"].join("\n"),computeVertexPositionVS:["vec2 xy = texCoord * 2.0 - 1.0;","vec4 vertexPositionProjected = vec4( xy, depth, 1.0 );","vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;","vertexPositionVS.xyz /= vertexPositionVS.w;","vertexPositionVS.w = 1.0;"].join("\n"),computeSpecular:["vec3 halfVector = normalize( lightVector - normalize( vertexPositionVS.xyz ) );","float dotNormalHalf = max( dot( normal, halfVector ), 0.0 );","float specular = 0.31830988618 * ( shininess * 0.5 + 1.0 ) * pow( dotNormalHalf, shininess );"].join("\n"),combine:["gl_FragColor = vec4( lightIntensity * lightColor * max( dot( lightVector, normal ), 0.0 ) * ( diffuseColor + specular * specularColor ) * attenuation, 1.0 );"].join("\n")},THREE.ShaderDeferredCommon={commonUniforms:{matProjInverse:new THREE.Uniform(new THREE.Matrix4),viewWidth:new THREE.Uniform(800),viewHeight:new THREE.Uniform(600)}},THREE.ShaderDeferred={normalDepth:{uniforms:{},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","\tvNormal = normalize( transformedNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",THREE.DeferredShaderChunk.packNormalDepth,"\tgl_FragColor = packedNormalDepth;","}"].join("\n")},color:{uniforms:{map:new THREE.Uniform(null),offsetRepeat:new THREE.Uniform(new THREE.Vector4(0,0,1,1)),diffuse:new THREE.Uniform(new THREE.Color(0)),emissive:new THREE.Uniform(new THREE.Color(0)),specular:new THREE.Uniform(new THREE.Color(0)),shininess:new THREE.Uniform(30)},vertexShader:["#include <uv_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <uv_vertex>","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","#include <uv_pars_fragment>","#include <map_pars_fragment>",THREE.DeferredShaderChunk.packVector3,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;","#include <map_fragment>",THREE.DeferredShaderChunk.packColor,"\tgl_FragColor = packedColor;","}"].join("\n")},emissiveLight:{uniforms:Object.assign({samplerColor:new THREE.Uniform(null)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackColor,"\tgl_FragColor = vec4( emissiveColor, 1.0 );","}"].join("\n")},pointLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1),lightRadius:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",THREE.DeferredShaderChunk.unpackColor,THREE.DeferredShaderChunk.computeSpecular,"\t//float cutoff = 0.3;","\t//float denom = distance / lightRadius + 1.0;","\t//float attenuation = 1.0 / ( denom * denom );","\t//attenuation = ( attenuation - cutoff ) / ( 1.0 - cutoff );","\t//attenuation = max( attenuation, 0.0 );","\t//attenuation *= attenuation;","\t//diffuseColor *= saturate( -distance / lightRadius + 1.0 );","\t//float attenuation = 1.0;","\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",THREE.DeferredShaderChunk.combine,"}"].join("\n")},spotLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightAngle:new THREE.Uniform(1),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,THREE.DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}","\tdiffuseColor *= spot;",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.combine,"}"].join("\n")},directionalLight:{uniforms:Object.assign({samplerNormalDepth:new THREE.Uniform(null),samplerColor:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepth;","uniform sampler2D samplerColor;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepth,THREE.DeferredShaderChunk.computeVertexPositionVS,THREE.DeferredShaderChunk.unpackColor,"\tvec3 lightVector = normalize( lightDirectionVS );",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.combine,"}"].join("\n")},normalDepthShininess:{uniforms:{shininess:new THREE.Uniform(30)},vertexShader:["varying vec3 vNormal;","varying vec4 vPosition;","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","\tvNormal = normalize( transformedNormal );","\tvPosition = gl_Position;","}"].join("\n"),fragmentShader:["varying vec3 vNormal;","varying vec4 vPosition;","uniform float shininess;",THREE.DeferredShaderChunk.packNormal,"void main() {","\tvec3 normal = vNormal;","\tvec4 position = vPosition;",THREE.DeferredShaderChunk.packNormalDepthShininess,"\tgl_FragColor = packedNormalDepthShininess;","}"].join("\n")},pointLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1),lightRadius:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() {","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform float lightIntensity;","uniform float lightRadius;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = lightPositionVS - vertexPositionVS.xyz;","\tfloat distance = length( lightVector );","\tif ( distance > lightRadius ) discard;","\tlightVector = normalize( lightVector );",THREE.DeferredShaderChunk.computeSpecular,"\tfloat attenuation = saturate( -distance / lightRadius + 1.0 );",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},spotLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightPositionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightAngle:new THREE.Uniform(1),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightPositionVS;","uniform vec3 lightDirectionVS;","uniform float lightAngle;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightPositionVS.xyz - vertexPositionVS.xyz );","\tfloat rho = dot( lightDirectionVS, lightVector );","\tfloat rhoMax = cos( lightAngle );","\tif ( rho <= rhoMax ) discard;","\tfloat theta = rhoMax + 0.0001;","\tfloat phi = rhoMax + 0.05;","\tfloat falloff = 4.0;","\tfloat spot = 0.0;","\tif ( rho >= phi ) {","\t\tspot = 1.0;","\t} else if ( rho <= theta ) {","\t\tspot = 0.0;","\t} else { ","\t\tspot = pow( ( rho - theta ) / ( phi - theta ), falloff );","\t}",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = spot * packedLight;","}"].join("\n")},directionalLightPre:{uniforms:Object.assign({samplerNormalDepthShininess:new THREE.Uniform(null),lightColor:new THREE.Uniform(new THREE.Color(0)),lightDirectionVS:new THREE.Uniform(new THREE.Vector3(0,1,0)),lightIntensity:new THREE.Uniform(1)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["void main() { ","\tgl_Position = vec4( sign( position.xy ), 0.0, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D samplerNormalDepthShininess;","uniform float viewHeight;","uniform float viewWidth;","uniform vec3 lightColor;","uniform vec3 lightDirectionVS;","uniform float lightIntensity;","uniform mat4 matProjInverse;",THREE.DeferredShaderChunk.unpackFloat,THREE.DeferredShaderChunk.unpackVector2,"void main() {",THREE.DeferredShaderChunk.computeTextureCoord,THREE.DeferredShaderChunk.unpackNormalDepthShininess,THREE.DeferredShaderChunk.computeVertexPositionVS,"\tvec3 lightVector = normalize( lightDirectionVS );",THREE.DeferredShaderChunk.computeSpecular,"\tconst float attenuation = 1.0;",THREE.DeferredShaderChunk.packLight,"\tgl_FragColor = packedLight;","}"].join("\n")},reconstruction:{uniforms:Object.assign({samplerLight:new THREE.Uniform(null),map:new THREE.Uniform(null),offsetRepeat:new THREE.Uniform(new THREE.Vector4(0,0,1,1)),diffuse:new THREE.Uniform(new THREE.Color(0)),emissive:new THREE.Uniform(new THREE.Color(0)),specular:new THREE.Uniform(new THREE.Color(0)),shininess:new THREE.Uniform(30)},THREE.ShaderDeferredCommon.commonUniforms),vertexShader:["#include <uv_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","void main() {","#include <uv_vertex>","#include <begin_vertex>","#include <beginnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D samplerLight;","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","uniform float viewHeight;","uniform float viewWidth;","#include <uv_pars_fragment>","#include <map_pars_fragment>",THREE.DeferredShaderChunk.unpackFloat,"void main() {","\tvec4 diffuseColor = vec4( diffuse, 1.0 );","\tvec3 emissiveColor = emissive;","\tvec3 specularColor = specular;",THREE.DeferredShaderChunk.computeTextureCoord,"\tvec4 light = texture2D( samplerLight, texCoord );","#include <map_fragment>","\tvec3 diffuseFinal = diffuseColor.rgb * light.rgb;","\tvec3 emissiveFinal = emissiveColor;","\tvec3 specularFinal = specularColor * light.rgb * light.a;","\tgl_FragColor = vec4( diffuseFinal + emissiveFinal + specularFinal, 1.0 );","}"].join("\n")},final:{uniforms:{samplerResult:new THREE.Uniform(null)},vertexShader:["varying vec2 texCoord;","void main() {","\tvec4 pos = vec4( sign( position.xy ), 0.0, 1.0 );","\ttexCoord = pos.xy * vec2( 0.5 ) + 0.5;","\tgl_Position = pos;","}"].join("\n"),fragmentShader:["varying vec2 texCoord;","uniform sampler2D samplerResult;","void main() {","\tgl_FragColor = texture2D( samplerResult, texCoord );","}"].join("\n")}};
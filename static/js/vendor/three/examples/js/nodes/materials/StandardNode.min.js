THREE.StandardNode=function(){THREE.GLNode.call(this),this.color=new THREE.ColorNode(15658734),this.roughness=new THREE.FloatNode(.5),this.metalness=new THREE.FloatNode(.5)},THREE.StandardNode.prototype=Object.create(THREE.GLNode.prototype),THREE.StandardNode.prototype.constructor=THREE.StandardNode,THREE.StandardNode.prototype.nodeType="Standard",THREE.StandardNode.prototype.build=function(e){var t,i=e.material;if(i.define("PHYSICAL"),this.clearCoat||this.clearCoatRoughness||i.define("STANDARD"),i.define("ALPHATEST","0.0"),i.requires.lights=!0,i.extensions.shaderTextureLOD=!0,e.isShader("vertex")){var s=this.transform?this.transform.parseAndBuildCode(e,"v3",{cache:"transform"}):void 0;i.mergeUniform(THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights])),i.addVertexPars(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif","#include <common>","#include <fog_pars_vertex>","#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>"].join("\n"));var r=["#include <beginnormal_vertex>","#include <morphnormal_vertex>","#include <skinbase_vertex>","#include <skinnormal_vertex>","#include <defaultnormal_vertex>","#include <logdepthbuf_pars_vertex>","#include <logdepthbuf_pars_vertex>","#include <logdepthbuf_pars_vertex>","#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif","#include <begin_vertex>"];s&&r.push(s.code,"transformed = "+s.result+";"),r.push("#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","#include <fog_vertex>","#include <logdepthbuf_vertex>","\tvViewPosition = - mvPosition.xyz;","#include <worldpos_vertex>","#include <shadowmap_vertex>"),t=r.join("\n")}else{var o={bias:new THREE.RoughnessToBlinnExponentNode,offsetU:0,offsetV:0},a=!i.isDefined("STANDARD");this.color.parse(e,{slot:"color"}),this.roughness.parse(e),this.metalness.parse(e),this.alpha&&this.alpha.parse(e),this.normal&&this.normal.parse(e),this.normalScale&&this.normal&&this.normalScale.parse(e),this.clearCoat&&this.clearCoat.parse(e),this.clearCoatRoughness&&this.clearCoatRoughness.parse(e),this.reflectivity&&this.reflectivity.parse(e),this.light&&this.light.parse(e,{cache:"light"}),this.ao&&this.ao.parse(e),this.ambient&&this.ambient.parse(e),this.shadow&&this.shadow.parse(e),this.emissive&&this.emissive.parse(e,{slot:"emissive"}),this.environment&&this.environment.parse(e,{cache:"env",requires:o,slot:"environment"});var l=this.color.buildCode(e,"c",{slot:"color"}),n=this.roughness.buildCode(e,"fv1"),d=this.metalness.buildCode(e,"fv1"),h=this.alpha?this.alpha.buildCode(e,"fv1"):void 0,u=this.normal?this.normal.buildCode(e,"v3"):void 0,c=this.normalScale&&this.normal?this.normalScale.buildCode(e,"v2"):void 0,f=this.clearCoat?this.clearCoat.buildCode(e,"fv1"):void 0,m=this.clearCoatRoughness?this.clearCoatRoughness.buildCode(e,"fv1"):void 0,p=this.reflectivity?this.reflectivity.buildCode(e,"fv1"):void 0,v=this.light?this.light.buildCode(e,"v3",{cache:"light"}):void 0,g=this.ao?this.ao.buildCode(e,"fv1"):void 0,C=this.ambient?this.ambient.buildCode(e,"c"):void 0,_=this.shadow?this.shadow.buildCode(e,"c"):void 0,E=this.emissive?this.emissive.buildCode(e,"c",{slot:"emissive"}):void 0,S=this.environment?this.environment.buildCode(e,"c",{cache:"env",requires:o,slot:"environment"}):void 0,N=a&&S?this.environment.buildCode(e,"c",{cache:"clearCoat",requires:o,slot:"environment"}):void 0;i.requires.transparent=void 0!=h,i.addFragmentPars(["varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif","#include <common>","#include <fog_pars_fragment>","#include <bsdfs>","#include <lights_pars_begin>","#include <lights_physical_pars_fragment>","#include <shadowmap_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <logdepthbuf_vertex>"].join("\n"));r=["\t#include <normal_fragment_begin>","\tPhysicalMaterial material;","\tmaterial.diffuseColor = vec3( 1.0 );",l.code,"\tvec3 diffuseColor = "+l.result+";","\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );","#include <logdepthbuf_fragment>",n.code,"\tfloat roughnessFactor = "+n.result+";",d.code,"\tfloat metalnessFactor = "+d.result+";"];h&&r.push(h.code,"if ( "+h.result+" <= ALPHATEST ) discard;"),u&&(e.include("perturbNormal2Arb"),r.push(u.code),c&&r.push(c.code),r.push("normal = perturbNormal2Arb(-vViewPosition,normal,"+u.result+","+(new THREE.UVNode).build(e,"v2")+","+(c?c.result:"vec2( 1.0 )")+");")),r.push("material.diffuseColor = "+(v?"vec3( 1.0 )":"diffuseColor * (1.0 - metalnessFactor)")+";"),r.push("material.specularRoughness = clamp( roughnessFactor, DEFAULT_SPECULAR_COEFFICIENT, 1.0 );"),f?r.push(f.code,"material.clearCoat = saturate( "+f.result+" );"):a&&r.push("material.clearCoat = 0.0;"),m?r.push(m.code,"material.clearCoatRoughness = clamp( "+m.result+", DEFAULT_SPECULAR_COEFFICIENT, 1.0 );"):a&&r.push("material.clearCoatRoughness = 0.0;"),p?r.push(p.code,"material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( "+p.result+" ) ), diffuseColor, metalnessFactor );"):r.push("material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );"),r.push("#include <lights_fragment_begin>","#include <lights_fragment_end>"),v&&(r.push(v.code,"reflectedLight.directDiffuse = "+v.result+";"),r.push("diffuseColor *= 1.0 - metalnessFactor;","reflectedLight.directDiffuse *= diffuseColor;","reflectedLight.indirectDiffuse *= diffuseColor;")),g&&r.push(g.code,"reflectedLight.indirectDiffuse *= "+g.result+";","float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );","reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, "+g.result+", material.specularRoughness );"),C&&r.push(C.code,"reflectedLight.indirectDiffuse += "+C.result+";"),_&&r.push(_.code,"reflectedLight.directDiffuse *= "+_.result+";","reflectedLight.directSpecular *= "+_.result+";"),E&&r.push(E.code,"reflectedLight.directDiffuse += "+E.result+";"),S&&(r.push(S.code),N&&r.push(N.code,"clearCoatRadiance += "+N.result+";"),r.push("RE_IndirectSpecular("+S.result+", clearCoatRadiance, geometry, material, reflectedLight );")),r.push("vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;"),h?r.push("gl_FragColor = vec4( outgoingLight, "+h.result+" );"):r.push("gl_FragColor = vec4( outgoingLight, 1.0 );"),r.push("#include <premultiplied_alpha_fragment>","#include <tonemapping_fragment>","#include <encodings_fragment>","#include <fog_fragment>"),t=r.join("\n")}return t},THREE.StandardNode.prototype.toJSON=function(e){var t=this.getJSONNode(e);return t||(t=this.createJSONNode(e),this.transform&&(t.transform=this.transform.toJSON(e).uuid),t.color=this.color.toJSON(e).uuid,t.roughness=this.roughness.toJSON(e).uuid,t.metalness=this.metalness.toJSON(e).uuid,this.alpha&&(t.alpha=this.alpha.toJSON(e).uuid),this.normal&&(t.normal=this.normal.toJSON(e).uuid),this.normalScale&&(t.normalScale=this.normalScale.toJSON(e).uuid),this.clearCoat&&(t.clearCoat=this.clearCoat.toJSON(e).uuid),this.clearCoatRoughness&&(t.clearCoatRoughness=this.clearCoatRoughness.toJSON(e).uuid),this.reflectivity&&(t.reflectivity=this.reflectivity.toJSON(e).uuid),this.light&&(t.light=this.light.toJSON(e).uuid),this.ao&&(t.ao=this.ao.toJSON(e).uuid),this.ambient&&(t.ambient=this.ambient.toJSON(e).uuid),this.shadow&&(t.shadow=this.shadow.toJSON(e).uuid),this.emissive&&(t.emissive=this.emissive.toJSON(e).uuid),this.environment&&(t.environment=this.environment.toJSON(e).uuid)),t};
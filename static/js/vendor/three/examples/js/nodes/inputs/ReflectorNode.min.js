THREE.ReflectorNode=function(t){THREE.TempNode.call(this,"v4"),t&&this.setMirror(t)},THREE.ReflectorNode.prototype=Object.create(THREE.TempNode.prototype),THREE.ReflectorNode.prototype.constructor=THREE.ReflectorNode,THREE.ReflectorNode.prototype.nodeType="Reflector",THREE.ReflectorNode.prototype.setMirror=function(t){this.mirror=t,this.textureMatrix=new THREE.Matrix4Node(this.mirror.material.uniforms.textureMatrix.value),this.localPosition=new THREE.PositionNode(THREE.PositionNode.LOCAL),this.coord=new THREE.OperatorNode(this.textureMatrix,this.localPosition,THREE.OperatorNode.MUL),this.coordResult=new THREE.OperatorNode(null,this.coord,THREE.OperatorNode.ADD),this.texture=new THREE.TextureNode(this.mirror.material.uniforms.tDiffuse.value,this.coord,null,!0)},THREE.ReflectorNode.prototype.generate=function(t,e){t.material;return t.isShader("fragment")?(this.coordResult.a=this.offset,this.texture.coord=this.offset?this.coordResult:this.coord,"sampler2D"===e?this.texture.build(t,e):t.format(this.texture.build(t,this.type),this.type,e)):(console.warn("THREE.ReflectorNode is not compatible with "+t.shader+" shader."),t.format("vec4(0.0)",this.type,e))},THREE.ReflectorNode.prototype.toJSON=function(t){var e=this.getJSONNode(t);return e||((e=this.createJSONNode(t)).mirror=this.mirror.uuid,this.offset&&(e.offset=this.offset.toJSON(t).uuid)),e};
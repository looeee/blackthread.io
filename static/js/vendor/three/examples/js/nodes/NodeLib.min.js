THREE.NodeLib={nodes:{},keywords:{},add:function(e){this.nodes[e.name]=e},addKeyword:function(e,o,t){t=void 0===t||t,this.keywords[e]={callback:o,cache:t}},remove:function(e){delete this.nodes[e.name]},removeKeyword:function(e){delete this.keywords[e]},get:function(e){return this.nodes[e]},getKeyword:function(e,o){return this.keywords[e].callback.call(this,o)},getKeywordData:function(e){return this.keywords[e]},contains:function(e){return void 0!=this.nodes[e]},containsKeyword:function(e){return void 0!=this.keywords[e]}},THREE.NodeLib.addKeyword("uv",function(){return new THREE.UVNode}),THREE.NodeLib.addKeyword("uv2",function(){return new THREE.UVNode(1)}),THREE.NodeLib.addKeyword("position",function(){return new THREE.PositionNode}),THREE.NodeLib.addKeyword("worldPosition",function(){return new THREE.PositionNode(THREE.PositionNode.WORLD)}),THREE.NodeLib.addKeyword("normal",function(){return new THREE.NormalNode}),THREE.NodeLib.addKeyword("worldNormal",function(){return new THREE.NormalNode(THREE.NormalNode.WORLD)}),THREE.NodeLib.addKeyword("viewPosition",function(){return new THREE.PositionNode(THREE.NormalNode.VIEW)}),THREE.NodeLib.addKeyword("viewNormal",function(){return new THREE.NormalNode(THREE.NormalNode.VIEW)}),THREE.NodeLib.addKeyword("time",function(){return new THREE.TimerNode}),THREE.NodeLib.add(new THREE.ConstNode("vec3 LUMA vec3(0.2125, 0.7154, 0.0721)")),THREE.NodeLib.add(new THREE.FunctionNode(["vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 map, vec2 mUv, vec2 scale ) {","\tvec3 q0 = dFdx( eye_pos );","\tvec3 q1 = dFdy( eye_pos );","\tvec2 st0 = dFdx( mUv.st );","\tvec2 st1 = dFdy( mUv.st );","\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );","\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );","\tvec3 N = normalize( surf_norm );","\tvec3 mapN = map * 2.0 - 1.0;","\tmapN.xy = scale * mapN.xy;","\tmat3 tsn = mat3( S, T, N );","\treturn normalize( tsn * mapN );","}"].join("\n"),null,{derivatives:!0})),THREE.NodeLib.add(new THREE.FunctionNode(["float snoise(vec2 co) {","\treturn fract( sin( dot(co.xy, vec2(12.9898,78.233) ) ) * 43758.5453 );","}"].join("\n"))),THREE.NodeLib.add(new THREE.FunctionNode(["vec3 hue_rgb(vec3 rgb, float adjustment) {","\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);","\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);","\tvec3 yiq = RGBtoYIQ * rgb;","\tfloat hue = atan(yiq.z, yiq.y) + adjustment;","\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);","\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));","}"].join("\n"))),THREE.NodeLib.add(new THREE.FunctionNode(["vec3 saturation_rgb(vec3 rgb, float adjustment) {","\tvec3 intensity = vec3(dot(rgb, LUMA));","\treturn mix(intensity, rgb, adjustment);","}"].join("\n"))),THREE.NodeLib.add(new THREE.FunctionNode(["float luminance_rgb(vec3 rgb) {","\treturn dot(rgb, LUMA);","}"].join("\n"))),THREE.NodeLib.add(new THREE.FunctionNode(["vec3 vibrance_rgb(vec3 rgb, float adjustment) {","\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;","\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));","\tfloat amt = (mx - average) * (-3.0 * adjustment);","\treturn mix(rgb.rgb, vec3(mx), amt);","}"].join("\n")));
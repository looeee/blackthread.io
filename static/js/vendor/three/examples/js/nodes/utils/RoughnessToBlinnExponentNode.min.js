THREE.RoughnessToBlinnExponentNode=function(){THREE.TempNode.call(this,"fv1")},THREE.RoughnessToBlinnExponentNode.getSpecularMIPLevel=new THREE.FunctionNode(["float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {","\tfloat maxMIPLevelScalar = float( maxMIPLevel );","\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );","\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );","}"].join("\n")),THREE.RoughnessToBlinnExponentNode.prototype=Object.create(THREE.TempNode.prototype),THREE.RoughnessToBlinnExponentNode.prototype.constructor=THREE.RoughnessToBlinnExponentNode,THREE.RoughnessToBlinnExponentNode.prototype.nodeType="RoughnessToBlinnExponent",THREE.RoughnessToBlinnExponentNode.prototype.generate=function(e,n){var o=e.material;return e.isShader("fragment")?o.isDefined("PHYSICAL")?(e.include(THREE.RoughnessToBlinnExponentNode.getSpecularMIPLevel),e.isCache("clearCoat")?e.format("getSpecularMIPLevel( Material_ClearCoat_BlinnShininessExponent( material ), 8 )",this.type,n):e.format("getSpecularMIPLevel( Material_BlinnShininessExponent( material ), 8 )",this.type,n)):(console.warn("THREE.RoughnessToBlinnExponentNode is only compatible with PhysicalMaterial."),e.format("0.0",this.type,n)):(console.warn("THREE.RoughnessToBlinnExponentNode is not compatible with "+e.shader+" shader."),e.format("0.0",this.type,n))};
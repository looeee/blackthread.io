THREE.SimplifyModifier=function(){},function(){var e=new THREE.Vector3,o=new THREE.Vector3;function t(e,o){var t=e.indexOf(o);t>-1&&e.splice(t,1)}function i(e,o){var t,i,s,r=o.position.distanceTo(e.position),n=0,h=[],a=(e.faces,e.faces.length);for(t=0;t<a;t++)(i=e.faces[t]).hasVertex(o)&&h.push(i);for(t=0;t<a;t++){var f=1;i=e.faces[t];for(var c=0;c<h.length;c++){s=h[c];var v=i.normal.dot(s.normal);f=Math.min(f,(1.001-v)/2)}n=Math.max(n,f)}return h.length<2&&(n=1),r*n+0}function s(e){if(0===e.neighbors.length)return e.collapseNeighbor=null,void(e.collapseCost=-.01);e.collapseCost=1e5,e.collapseNeighbor=null;for(var o=0;o<e.neighbors.length;o++){var t=i(e,e.neighbors[o]);e.collapseNeighbor||(e.collapseNeighbor=e.neighbors[o],e.collapseCost=t,e.minCost=t,e.totalCost=0,e.costCount=0),e.costCount++,e.totalCost+=t,t<e.minCost&&(e.collapseNeighbor=e.neighbors[o],e.minCost=t)}e.collapseCost=e.totalCost/e.costCount}function r(e,o){for(console.assert(0===e.faces.length);e.neighbors.length;){t(e.neighbors.pop().neighbors,e)}t(o,e)}function n(e,o){t(o,e),e.v1&&t(e.v1.faces,e),e.v2&&t(e.v2.faces,e),e.v3&&t(e.v3.faces,e);for(var i,s,r=[this.v1,this.v2,this.v3],n=0;n<3;n++)s=r[(n+1)%3],(i=r[n])&&s&&(i.removeIfNonNeighbor(s),s.removeIfNonNeighbor(i))}function h(e,o,t,i){if(i){var h,a=[];for(h=0;h<t.neighbors.length;h++)a.push(t.neighbors[h]);for(h=t.faces.length-1;h>=0;h--)t.faces[h].hasVertex(i)&&n(t.faces[h],o);for(h=t.faces.length-1;h>=0;h--)t.faces[h].replaceVertex(t,i);for(r(t,e),h=0;h<a.length;h++)s(a[h])}else r(t,e)}function a(e){for(var o=e[0],t=0;t<e.length;t++)e[t].collapseCost<o.collapseCost&&(o=e[t]);return o}function f(e,o,t,i,s,r){this.a=i,this.b=s,this.c=r,this.v1=e,this.v2=o,this.v3=t,this.normal=new THREE.Vector3,this.computeNormal(),e.faces.push(this),e.addUniqueNeighbor(o),e.addUniqueNeighbor(t),o.faces.push(this),o.addUniqueNeighbor(e),o.addUniqueNeighbor(t),t.faces.push(this),t.addUniqueNeighbor(e),t.addUniqueNeighbor(o)}function c(e,o){this.position=e,this.id=o,this.faces=[],this.neighbors=[],this.collapseCost=0,this.collapseNeighbor=null}f.prototype.computeNormal=function(){var t=this.v1.position,i=this.v2.position,s=this.v3.position;e.subVectors(s,i),o.subVectors(t,i),e.cross(o).normalize(),this.normal.copy(e)},f.prototype.hasVertex=function(e){return e===this.v1||e===this.v2||e===this.v3},f.prototype.replaceVertex=function(e,o){e===this.v1?this.v1=o:e===this.v2?this.v2=o:e===this.v3&&(this.v3=o),t(e.faces,this),o.faces.push(this),e.removeIfNonNeighbor(this.v1),this.v1.removeIfNonNeighbor(e),e.removeIfNonNeighbor(this.v2),this.v2.removeIfNonNeighbor(e),e.removeIfNonNeighbor(this.v3),this.v3.removeIfNonNeighbor(e),this.v1.addUniqueNeighbor(this.v2),this.v1.addUniqueNeighbor(this.v3),this.v2.addUniqueNeighbor(this.v1),this.v2.addUniqueNeighbor(this.v3),this.v3.addUniqueNeighbor(this.v1),this.v3.addUniqueNeighbor(this.v2),this.computeNormal()},c.prototype.addUniqueNeighbor=function(e){var o,t;o=this.neighbors,t=e,-1===o.indexOf(t)&&o.push(t)},c.prototype.removeIfNonNeighbor=function(e){var o=this.neighbors,t=this.faces,i=o.indexOf(e);if(-1!==i){for(var s=0;s<t.length;s++)if(t[s].hasVertex(e))return;o.splice(i,1)}},THREE.SimplifyModifier.prototype.modify=function(e,o){e instanceof THREE.BufferGeometry&&!e.vertices&&!e.faces&&(console.log("converting BufferGeometry to Geometry"),e=(new THREE.Geometry).fromBufferGeometry(e)),e.mergeVertices();var t,i,r,n=e.vertices,v=e.faces,l=(new THREE.Geometry,new Array(n.length)),g=new Array(v.length);for(t=0,i=n.length;t<i;t++)l[t]=new c(n[t],t);for(t=0,i=v.length;t<i;t++)r=v[t],g[t]=new f(l[r.a],l[r.b],l[r.c],r.a,r.b,r.c);for(t=0,i=l.length;t<i;t++)s(l[t]);new Array(l.length),new Array(l.length);for(var u,p=o;p--;){if(!(u=a(l))){console.log("no next vertex");break}h(l,g,u,u.collapseNeighbor)}var b=new THREE.Geometry;for(t=0;t<l.length;t++){var N=l[t];b.vertices.push(N.position)}for(t=0;t<g.length;t++){var d=g[t];b.faces.push(new THREE.Face3(l.indexOf(d.v1),l.indexOf(d.v2),l.indexOf(d.v3)))}return b}}();
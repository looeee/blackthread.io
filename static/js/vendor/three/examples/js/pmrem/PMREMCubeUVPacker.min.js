THREE.PMREMCubeUVPacker=function(t,e){this.cubeLods=t,this.numLods=e;var n=4*t[0].width,a=t[0].texture,i={format:a.format,magFilter:a.magFilter,minFilter:a.minFilter,type:a.type,generateMipmaps:a.generateMipmaps,anisotropy:a.anisotropy,encoding:a.encoding===THREE.RGBEEncoding?THREE.RGBM16Encoding:a.encoding};i.encoding===THREE.RGBM16Encoding&&(i.magFilter=THREE.LinearFilter,i.minFilter=THREE.LinearFilter),this.CubeUVRenderTarget=new THREE.WebGLRenderTarget(n,n,i),this.CubeUVRenderTarget.texture.name="PMREMCubeUVPacker.cubeUv",this.CubeUVRenderTarget.texture.mapping=THREE.CubeUVReflectionMapping,this.camera=new THREE.OrthographicCamera(.5*-n,.5*n,.5*-n,.5*n,0,1e3),this.scene=new THREE.Scene,this.scene.add(this.camera),this.objects=[];var r=[];r.push(new THREE.Vector2(0,0)),r.push(new THREE.Vector2(1,0)),r.push(new THREE.Vector2(2,0)),r.push(new THREE.Vector2(0,1)),r.push(new THREE.Vector2(1,1)),r.push(new THREE.Vector2(2,1));var o=n;n=t[0].width;var u=0,c=4;this.numLods=Math.log(t[0].width)/Math.log(2)-2;for(var s=0;s<this.numLods;s++){var p=.5*(o-o/c);n>16&&(c*=2);for(var E=n>16?6:1,l=0,v=0,m=n,d=0;d<E;d++){for(var g=0;g<6;g++){var h=this.getShader();h.uniforms.envMap.value=this.cubeLods[s].texture,h.envMap=this.cubeLods[s].texture,h.uniforms.faceIndex.value=g,h.uniforms.mapSize.value=m;var R=new THREE.Mesh(new THREE.PlaneGeometry(m,m,0),h);R.position.x=r[g].x*m-p+l,R.position.y=r[g].y*m-p+u+v,R.material.side=THREE.DoubleSide,this.scene.add(R),this.objects.push(R)}v+=1.75*m,l+=1.25*m,m/=2}u+=2*n,n>16&&(n/=2)}},THREE.PMREMCubeUVPacker.prototype={constructor:THREE.PMREMCubeUVPacker,update:function(t){var e=t.gammaInput,n=t.gammaOutput,a=t.toneMapping,i=t.toneMappingExposure,r=t.getRenderTarget();t.gammaInput=!1,t.gammaOutput=!1,t.toneMapping=THREE.LinearToneMapping,t.toneMappingExposure=1,t.render(this.scene,this.camera,this.CubeUVRenderTarget,!1),t.setRenderTarget(r),t.toneMapping=a,t.toneMappingExposure=i,t.gammaInput=e,t.gammaOutput=n},getShader:function(){return new THREE.ShaderMaterial({uniforms:{faceIndex:{value:0},mapSize:{value:0},envMap:{value:null},testColor:{value:new THREE.Vector3(1,1,1)}},vertexShader:"precision highp float;\t\t\t\tvarying vec2 vUv;\t\t\t\tvoid main() {\t\t\t\t\tvUv = uv;\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\t\t\t\t}",fragmentShader:"precision highp float;\t\t\t\tvarying vec2 vUv;\t\t\t\tuniform samplerCube envMap;\t\t\t\tuniform float mapSize;\t\t\t\tuniform vec3 testColor;\t\t\t\tuniform int faceIndex;\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tvec3 sampleDirection;\t\t\t\t\tvec2 uv = vUv;\t\t\t\t\tuv = uv * 2.0 - 1.0;\t\t\t\t\tuv.y *= -1.0;\t\t\t\t\tif(faceIndex == 0) {\t\t\t\t\t\tsampleDirection = normalize(vec3(1.0, uv.y, -uv.x));\t\t\t\t\t} else if(faceIndex == 1) {\t\t\t\t\t\tsampleDirection = normalize(vec3(uv.x, 1.0, uv.y));\t\t\t\t\t} else if(faceIndex == 2) {\t\t\t\t\t\tsampleDirection = normalize(vec3(uv.x, uv.y, 1.0));\t\t\t\t\t} else if(faceIndex == 3) {\t\t\t\t\t\tsampleDirection = normalize(vec3(-1.0, uv.y, uv.x));\t\t\t\t\t} else if(faceIndex == 4) {\t\t\t\t\t\tsampleDirection = normalize(vec3(uv.x, -1.0, -uv.y));\t\t\t\t\t} else {\t\t\t\t\t\tsampleDirection = normalize(vec3(-uv.x, uv.y, -1.0));\t\t\t\t\t}\t\t\t\t\tvec4 color = envMapTexelToLinear( textureCube( envMap, sampleDirection ) );\t\t\t\t\tgl_FragColor = linearToOutputTexel( color );\t\t\t\t}",blending:THREE.CustomBlending,premultipliedAlpha:!1,blendSrc:THREE.OneFactor,blendDst:THREE.ZeroFactor,blendSrcAlpha:THREE.OneFactor,blendDstAlpha:THREE.ZeroFactor,blendEquation:THREE.AddEquation})}};
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Loading on Black Thread Design</title>
    <link>https://www.blackthreaddesign.com/tags/loading/</link>
    <description>Recent content in Loading on Black Thread Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.blackthreaddesign.com/tags/loading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Faking a progress bar in three.js</title>
      <link>https://www.blackthreaddesign.com/blog/progress-bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/blog/progress-bar/</guid>
      <description>Setting up a loading overlay to let users know when your page will be ready should be easy, right?
Well, the answer to that is yes, sometimes. And then again, more often, the answer is no. We&amp;rsquo;ve all seen loading bars like this in various applications - first they say you&amp;rsquo;ll have to wait one hour, then 50 minutes, then 5 minutes&amp;hellip; and they end up taking 8 minutes.</description>
    </item>
    
    <item>
      <title>Promisifying three.js loaders</title>
      <link>https://www.blackthreaddesign.com/blog/promisifying-threejs-loaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/blog/promisifying-threejs-loaders/</guid>
      <description>Promises are great! Promises are the future! Well, async/await is probably the future, but lets take things one step at a time here.
In case you don&amp;rsquo;t know, promises simplify the process of dealing with asynchronous operations.
An asynchronous operation is something that might take a while - you don&amp;rsquo;t want to halt the program while you are waiting, so you need some way of waiting until your time taking task has run, and then resuming operation at that point in the program.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Requirements on Black Thread Design</title>
    <link>https://www.blackthreaddesign.com/tags/requirements/</link>
    <description>Recent content in Requirements on Black Thread Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.blackthreaddesign.com/tags/requirements/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Components and Helpers</title>
      <link>https://www.blackthreaddesign.com/tutorials/2-components-helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/2-components-helpers/</guid>
      <description>Congratulations! You made it to Section 2! That means you know have a basic understanding of how to set up a three.js scene, how to make it animate, add textures, camera controls and even automatically resize along with the browser window.
In this section we&amp;rsquo;ll be taking a closer look at some of the components that make up three.js, as well as some of the helper objects.
We&amp;rsquo;ll take a look at how the various components fit together (inheritance) and take our first in depth animation of an object - the Object3D which is the base class for nearly everything in three.</description>
    </item>
    
    <item>
      <title>Requirements for running a three.js scene</title>
      <link>https://www.blackthreaddesign.com/tutorials/0-0-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/0-0-requirements/</guid>
      <description>We&amp;rsquo;ll start with a quick overview of what you need to get a basic three.js app working. Please take the time to read over the topics in the introduction (we&amp;rsquo;ll get to the pretty 3D stuff soon, I promise!).
WebGL In these tutorials, we are going to be focusing on the WebGLRenderer. As the name implies, this requires a WebGL enabled device. Not so long ago, this was something that we had to worry about.</description>
    </item>
    
    <item>
      <title>Shapes and Transformations</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-5-shapes-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-5-shapes-transformations/</guid>
      <description>In this chapter, we&amp;rsquo;ll take a lighting quick look at some of the geometric shapes that are built into three.js. We&amp;rsquo;ve already seen two of them, the Torus Knot from chapters 1.1 and 1.2, and the Box from Chapter 1.3.
We&amp;rsquo;ll also take a look at how to move them around (translate them), scale them up and down and rotate them. Collectively, along with the less common shear, these are known as transformations (technically, they are linear or affine transformations).</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blackthread Design on Black Thread Design</title>
    <link>https://www.blackthreaddesign.com/</link>
    <description>Recent content in Blackthread Design on Black Thread Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.blackthreaddesign.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Faking a progress bar in three.js</title>
      <link>https://www.blackthreaddesign.com/blog/progress-bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/blog/progress-bar/</guid>
      <description>Setting up a loading overlay to let users know when your page will be ready should be easy, right?
Well, the answer to that is yes, sometimes. And then again, more often, the answer is no. We&amp;rsquo;ve all seen loading bars like this in various applications - first they say you&amp;rsquo;ll have to wait one hour, then 50 minutes, then 5 minutes&amp;hellip; and they end up taking 8 minutes.</description>
    </item>
    
    <item>
      <title>Promisifying three.js loaders</title>
      <link>https://www.blackthreaddesign.com/blog/promisifying-threejs-loaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/blog/promisifying-threejs-loaders/</guid>
      <description>Promises are great! Promises are the future! Well, async/await is probably the future, but lets take things one step at a time here.
In case you don&amp;rsquo;t know, promises simplify the process of dealing with asynchronous operations.
An asynchronous operation is something that might take a while - you don&amp;rsquo;t want to halt the program while you are waiting, so you need some way of waiting until your time taking task has run, and then resuming operation at that point in the program.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://www.blackthreaddesign.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/about/</guid>
      <description>Hello, and welcome to my website! My name&amp;rsquo;s Lewy, I&amp;rsquo;m a Irish front end JavaScript expert and recovering circus performer, specializing in WebGL with three.js.  I&amp;rsquo;m currently living the digital nomad dream in various beautiful places around South East Asia, climbing volcanoes, diving, eating spicy food and even doing a little programming from time to time.  Have a look around the site for examples of my recent blog posts, experiments, and my series of tutorials on getting up and running with three.</description>
    </item>
    
    <item>
      <title>Adding Camera Controls</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-4-orbit-controls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-4-orbit-controls/</guid>
      <description>So far our scene is not interactive - it is animated, but it doesn&amp;rsquo;t take any user input (unless you count responding to the changing size of the browser window).
As usual, we&amp;rsquo;ll continue from where we left off in the last chapter:

First of all, remove the lines that make the box rotate - it will be easier to see that the camera is moving without these.</description>
    </item>
    
    <item>
      <title>CSS Circles Animation</title>
      <link>https://www.blackthreaddesign.com/experiments/circles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/experiments/circles/</guid>
      <description>Pretty circles with a pure CSS animation hover effect. They were originally intended for the front page of this site. I decided not to use them there since I wanted to showcase some WebGL, but I still think they look nice! They&#39;re fully responsive too, so go ahead and resize the browser window.  They were originally inspired by something I found on CodePen, however I can&#39;t find it again to provide proper attribution - so, thank you mystery coder for the inspiration!</description>
    </item>
    
    <item>
      <title>Codepen</title>
      <link>https://www.blackthreaddesign.com/experiments/codepen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/experiments/codepen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Components and Helpers</title>
      <link>https://www.blackthreaddesign.com/tutorials/2-components-helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/2-components-helpers/</guid>
      <description>Congratulations! You made it to Section 2! That means you know have a basic understanding of how to set up a three.js scene, how to make it animate, add textures, camera controls and even automatically resize along with the browser window.
In this section we&amp;rsquo;ll be taking a closer look at some of the components that make up three.js, as well as some of the helper objects.
We&amp;rsquo;ll take a look at how the various components fit together (inheritance) and take our first in depth animation of an object - the Object3D which is the base class for nearly everything in three.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://www.blackthreaddesign.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/contact/</guid>
      <description> 
Get in touch! 
Your Name Email Address Message   </description>
    </item>
    
    <item>
      <title>Creating Rainbows - colors in three.js</title>
      <link>https://www.blackthreaddesign.com/tutorials/2-0-creating-rainbows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/2-0-creating-rainbows/</guid>
      <description>Fig 1: Three.js... with just a little help from Photoshop   We&amp;rsquo;ll be working closely with the Color docs page here. Open it up now and take a look.
The first thing you&amp;rsquo;ll notice is that there are many ways to specify a colour. For example, you can pass in 2 numbers representing the Red, Green and Blue components of the colour, or you can pass in the string &amp;lsquo;rebeccapurple&amp;rsquo; (or any other CSS color string), or you can pass in a HLS value.</description>
    </item>
    
    <item>
      <title>EscherSketch</title>
      <link>https://www.blackthreaddesign.com/experiments/eschersketch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/experiments/eschersketch/</guid>
      <description>This is a prototype of an automatic hyperbolic art generator and educational tool. It creates a regular edge to edge tiling of the hyperbolic plane represented as a Poincar√© disk, also known as a hyperbolic tesselation.  These were originally described by H. S. M. Coxeter, but were made famous by M.C. Escher in his series of Circle Limit woodcuts, back in the era when people were known only by their initials and surnames.</description>
    </item>
    
    <item>
      <title>First Steps</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-first-steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-first-steps/</guid>
      <description>Welcome to section 1, where we can finally get those creative juices flowing! This section is a gentle introduction to creating scenes with three.js.
We&amp;rsquo;ll explain how everything works as we go, but the explanations will be as short and simple as possible - we&amp;rsquo;ll add detail in later chapters.
Staring in chapter 1.0, we&amp;rsquo;ll take a look at the basic components of a three.js and the bare minimum we need to get three.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-0-getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-0-getting-started/</guid>
      <description>Strap in folks, it&amp;rsquo;s time to push some pixels!
Let&amp;rsquo;s get our first three.js scene up and running. When we are finished with chapters 1 and 2, we&amp;rsquo;ll have this glorious beast shining and rotating before us:

Follow along on Codepen I mentioned a few times in the introductory chapters that we&amp;rsquo;ll be using Codepen throughout these tutorials, and that you can either follow along there or create local files on your computer, but since I assume that lots of people are like me and skip introductory chapters, I should probably mention it again.</description>
    </item>
    
    <item>
      <title>Getting help and reporting bugs</title>
      <link>https://www.blackthreaddesign.com/tutorials/0-3-getting-help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/0-3-getting-help/</guid>
      <description>{:.no_toc}
So you need help? What&amp;rsquo;s that? You are completely frustrated, about to tear your hair out with frustration? You are cursing this abomination of a library, casting it out, never to darken your hard drive again?
Well, I have some good news for you!
First, take a deep breath, go outside and pet some kittens or shout at them or whatever else relieves your tortured soul (seriously, don&amp;rsquo;t shout at kittens).</description>
    </item>
    
    <item>
      <title>Introduction to textures</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-3-textures-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-3-textures-intro/</guid>
      <description>So far we have just created a simple coloured material for our mesh. If we want to create something more realistic we&amp;rsquo;ll have to move onto using texture mapping.
Put very simply, this means taking an image and stretching it over the surface of a 3D object. Of course, this will be very easy to do if the surface of the 3D object is square, and less easy of the surface is curved and knotted.</description>
    </item>
    
    <item>
      <title>Lights, Color, Action!</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-1-lights-color-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-1-lights-color-action/</guid>
      <description>We&amp;rsquo;ll pick up here exactly where we left off in the last chapter. Here is the complete code so far:
// create a WebGLRenderer and set its width and height const renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); // add the automatically created canvas element to the page document.body.appendChild( renderer.domElement ); // create a Scene const scene = new THREE.Scene(); // set up the options for a perspective camera const fov = 35; // fov = Field Of View const aspect = window.</description>
    </item>
    
    <item>
      <title>NFL Scouting App Test Page</title>
      <link>https://www.blackthreaddesign.com/hidden/nfl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/hidden/nfl/</guid>
      <description>Ratings Size  Athletic Ability  Foot Quickness / Setup  Dominant Hand Left Right Both  Release Quickness  Delivery  Mechanics  Arm Strength  Anticipation / Rhythm  Accuracy Short  Touch Short  Accuracy Long  Touch Long  Decision Making  Read Coverage/Go through Progression  Pocket Presence  Poise  Mobility  Throw on Move  Running Ability  Clutch Production  Ability to Win         </description>
    </item>
    
    <item>
      <title>Requirements for running a three.js scene</title>
      <link>https://www.blackthreaddesign.com/tutorials/0-0-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/0-0-requirements/</guid>
      <description>We&amp;rsquo;ll start with a quick overview of what you need to get a basic three.js app working. Please take the time to read over the topics in the introduction (we&amp;rsquo;ll get to the pretty 3D stuff soon, I promise!).
WebGL In these tutorials, we are going to be focusing on the WebGLRenderer. As the name implies, this requires a WebGL enabled device. Not so long ago, this was something that we had to worry about.</description>
    </item>
    
    <item>
      <title>Resizing the canvas</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-2-resize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-2-resize/</guid>
      <description>Here&amp;rsquo;s where we left off at the end of the last chapter.

It&amp;rsquo;s pretty respectable result for such a small amount of code. However, there is one big problem that will quickly make it look at lot less professional to anyone using your website - that is, the scene does not resize when the browser window changes size.
This will be particularly obvious if you load this page with a small browser window and then increase the size.</description>
    </item>
    
    <item>
      <title>Ribbons</title>
      <link>https://www.blackthreaddesign.com/experiments/ribbons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/experiments/ribbons/</guid>
      <description>Most browsers are unable to display thick lines with WebGL - the lines will always be rendered at 1px, no matter what the thickness is set to.  In this experiment the lines are generated as thin triangle strips, allowing for lines of any thickness.  Note that with this implementation, the thickness is a property of the geometry, so that if the camera zooms in the lines will get thicker.</description>
    </item>
    
    <item>
      <title>Robot Dance</title>
      <link>https://www.blackthreaddesign.com/hidden/robot_dance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/hidden/robot_dance/</guid>
      <description>Start with creating frames   Info Let&#39;s start by creating some frames. Each frame is a static pose that the robot can be in.
You can control the robot&#39;s head, shoulders and elbows. For each controllable joint, there are two axes of control, labelled pitch and yaw.
These control up/down and left/right motion.
Frames can either be grouped together, or added directly to the dance.
    # Head Left Shoulder Right Shoulder Left Elbow Right Elbow Add Frame         Create groups with multiple frames   Info Now that we&#39;ve created some frames, we can start to make an animation.</description>
    </item>
    
    <item>
      <title>Robot Simulation</title>
      <link>https://www.blackthreaddesign.com/hidden/robot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/hidden/robot/</guid>
      <description>Reset Randomize Run Simulation Show Grid Equation: y =   The field is a rectangle of width 1.4 metres and length 2 metres, the goal is 50cm wide and the centre of the table is at position (0, 0).
The ball has been randomly placed on the table at position (), which gives the above equation for a line going along the surface of the table through the ball.</description>
    </item>
    
    <item>
      <title>Shapes and Transformations</title>
      <link>https://www.blackthreaddesign.com/tutorials/1-5-shapes-transformations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/1-5-shapes-transformations/</guid>
      <description>In this chapter, we&amp;rsquo;ll take a lighting quick look at some of the geometric shapes that are built into three.js. We&amp;rsquo;ve already seen two of them, the Torus Knot from chapters 1.1 and 1.2, and the Box from Chapter 1.3.
We&amp;rsquo;ll also take a look at how to move them around (translate them), scale them up and down and rotate them. Collectively, along with the less common shear, these are known as transformations (technically, they are linear or affine transformations).</description>
    </item>
    
    <item>
      <title>Thanks for getting in touch!</title>
      <link>https://www.blackthreaddesign.com/thanks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/thanks/</guid>
      <description>Thanks for getting in touch! I&amp;rsquo;ll get back to you ASAP.</description>
    </item>
    
    <item>
      <title>Three.js loader and converter</title>
      <link>https://www.blackthreaddesign.com/loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/loader/</guid>
      <description> Viewer for fbx, gltf, glb or dae files and associated textures in jpg, png, gif, bmp or dds format using loaders from three.js r88.
Or load the Example Duck
   

    Bounding box - L: 0 W: 0 H: 0
Faces:  Vertices: 
                         Static Pose         </description>
    </item>
    
    <item>
      <title>Three.js on Github</title>
      <link>https://www.blackthreaddesign.com/tutorials/0-1-github-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/0-1-github-repo/</guid>
      <description>Everything officially related to the three.js project is in one rather monolithic repository on Github. Its maintained by the original creator of three.js, @mrdoob (AKA Ricardo Cabello), along with an army of open-source aficionados.
It&amp;rsquo;s a huge and very active repo - the 16th most starred Javascript library on Github in fact, and the 8th most forked. Its up there with superstars like React, jQuery and Node.js.
It&amp;rsquo;s also quite overwhelming at first glance, but luckily we only need to look inside two folders for now.</description>
    </item>
    
    <item>
      <title>Understanding the three.js revision system</title>
      <link>https://www.blackthreaddesign.com/tutorials/0-2-three-js-versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blackthreaddesign.com/tutorials/0-2-three-js-versions/</guid>
      <description>Semver? No way! The development pace of three.js is fast, and it uses a slightly unusual versioning system. Most software gets released incrementally as V0.5, V0.6, V1.0, V1.1.1 etc. This is known as semver, or Semantic Versioning.
Well, three.js is far too hipster for that - instead, we use a revision system. There&amp;rsquo;s a new revision out about once month or so, and we are currently up to Revision 88 (R88), as of mid December 2017.</description>
    </item>
    
  </channel>
</rss>